import torch
import torch.nn.functional as F
import numpy as np
from cv2.dnn import Net
from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from tensorflow.python.tpu import datasets
from torch import nn
from torch import optim
import torchvision
from torchvision.transforms import transforms

#data argumentation 是在原有数据集不足的情况下，对数据进行翻转裁剪等操作增大数据集的一种方式

#1----Flip操作
train_loader1=torch.utils.data.DataLoader(
    datasets.MNIST('../data', train=True, download=True,
                   transform=transforms.Compose([               # Compose 类似于 Sequential
                       transforms.RandomHorizontalFlip(),       #水平翻转
                       transforms.RandomVerticalFlip(),         #垂直翻转
                       transforms.ToTensor(),
                   ])),
    batch_size=100, shuffle=True)
#2----Rotate操作
train_loader2=torch.utils.data.DataLoader(
    datasets.MNIST('../data', train=True, download=True,
                   transform=transforms.Compose([
                       transforms.RandomRotation(15),                   #15°旋转
                       transforms.RandomRotation([90,180,270]),         #90°,180°,270°随机一个度数翻转
                       transforms.ToTensor(),
                   ])),
    batch_size=100, shuffle=True)
#3----Scale操作(中心点缩放)
train_loader3=torch.utils.data.DataLoader(
    datasets.MNIST('../data', train=True, download=True,
                   transform=transforms.Compose([
                       transforms.Resize([32,32]),                   #缩放为32*32
                       transforms.ToTensor(),
                   ])),
    batch_size=100, shuffle=True)
#4----Crop Part操作(裁剪部分)
train_loader4=torch.utils.data.DataLoader(
    datasets.MNIST('../data', train=True, download=True,
                   transform=transforms.Compose([
                       transforms.RandomCrop([28,28]),                   #缩放为32*32
                       transforms.ToTensor(),
                   ])),
    batch_size=100, shuffle=True)
#5----Nosie操作(用得少)
