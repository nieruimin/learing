pass
'''
数据-->协方差矩阵-->特征值-->对角化-->降维

'''
import numpy as np
import pandas as pd
from sklearn.decomposition import PCA
from sklearn.datasets import load_iris
from matplotlib import pyplot as plt
import math
iris = load_iris()
df = pd.DataFrame(iris.data)
df['class']=iris.target
# print("目标类别名称: ", iris.target_names)
# print(df['class'].unique())  #展示每列的可能性
df['class'] = df['class'].astype(str)
df.loc[df['class']=='0','class']='setosa'
df.loc[df['class']=='1','class']='versicolor'
df.loc[df['class']=='2','class']='virginica'
df.columns=['sepal_len', 'sepal_wid', 'petal_len', 'petal_wid','class']
print(df.head())
x=df.iloc[:,0:4].values
y=df.iloc[:,4].values
#数据可视化展示#
# label_dict={1:'setosa',2:'versicolor',3:'virginica'}
# feature_dict={0:'speal_len',1:'sepal_wid',2:'petal_len',3:'petal_wid'}
# plt.figure(figsize=(8,6))
# for i in range(4):
#     plt.subplot(2,2,i+1)
#     for lab in('setosa','versicolor','virginica'):
#         plt.hist(x[y==lab,i],label=lab,bins=10,alpha=0.3)#所有y与lab相同的行，第i列
#         plt.xlabel(feature_dict[i])
#         plt.legend(loc='upper right',fancybox=True,fontsize='8')
#     plt.tight_layout()  #使用plt.tight_layout()函数调整子图之间的间距，使它们不会重叠
# plt.show()

from sklearn.preprocessing import StandardScaler
X_std=StandardScaler().fit_transform(x)
# print(X_std)
cov_mat=np.cov(X_std.T)                 #计算协方差矩阵
eig_val,eig_vec=np.linalg.eig(cov_mat)  #计算特征值，特征向量
# print(eig_val)
# print(eig_vec)
# print('**'*50)
transposed_matrix=eig_vec.T         #将矩阵转置，使得特征向量在一个列表中
print(transposed_matrix)
val_exp=[(i/sum(eig_val))*100 for i in eig_val]     #将特征值映射为百分数
eig_val_info=np.cumsum(val_exp)         #计算每个特征值的重要程度
print(eig_val_info)
matrix_w=np.vstack((transposed_matrix[0],transposed_matrix[1])).T#将矩阵转为4*2
print(matrix_w,matrix_w.shape)
X=X_std.dot(matrix_w)
def plot_figure(x,y,xlabel,ylabel):
    plt.figure(figsize=(6,4))
    for lab,col in zip(('setosa','versicolor','virginica'),('blue','red','green')):
        plt.scatter(x[y==lab,0],x[y==lab,1],c=col,label=lab)
        plt.xlabel(xlabel)
        plt.ylabel(ylabel)
        plt.legend(loc='best')
        plt.tight_layout()
    plt.show()
plot_figure(x,y,'sepal_len','sepal_wid')
plot_figure(X,y,'PCA component 1','PCA component 2')
